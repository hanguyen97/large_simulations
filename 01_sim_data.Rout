
R version 4.0.5 (2021-03-31) -- "Shake and Throw"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> rm(list = ls())
> 
> setwd("~/ATTglasso/")
> 
> library(huge)
Registered S3 methods overwritten by 'huge':
  method    from
  plot.roc  pROC
  print.roc pROC
> library(MASS)
> library(corrplot)
corrplot 0.92 loaded
> source("library_test.R")
Type 'citation("pROC")' for a citation.

Attaching package: ‘pROC’

The following objects are masked from ‘package:stats’:

    cov, smooth, var


Attaching package: ‘gdata’

The following object is masked from ‘package:stats’:

    nobs

The following object is masked from ‘package:utils’:

    object.size

The following object is masked from ‘package:base’:

    startsWith

Loading required package: lpSolve
Warning message:
no DISPLAY variable so Tk is not available 
> 
> # ------------- DGPs -------------# 
> # simulate data - 100 replications
> # p = {100}, n = {200, 500, 1000}
> # graph type: random, band, cluster
> 
> set.seed(1)
> 
> # replication
> R <- 50
> p <- c(100, 300)
> dgp <- data.frame(p = rep(p,2), n=c(300, 300, 500, 500))
> 
> # graph settings
> # graph.type <- c("band", "toeplitz", "random", "random", "scale-free") 
> # graph.type <- c("band", "band", "block", "scale-free", "hub", "random") 
> # graph.param <- c(1, 2, 0.01, 0, 5, 0.01)
> graph.type <- c("band", "band", "block", "hub", "random") 
> graph.param <- c(1, 2, 0.01, 5, 0.01)
> 
> graph <- cbind(graph.type=graph.type, 
+                graph.param=graph.param)
> dgp.df <- merge(dgp, graph)
> 
> dgp.df$same.diag <- 0
> 
> dgp.df$graph.param <- as.numeric(dgp.df$graph.param)
> dgp.df <- dgp.df[order(dgp.df$graph.type, dgp.df$graph.param, 
+                       dgp.df$same.diag, dgp.df$p, dgp.df$n), ]  
> 
> 
> 
> # ------------- simulate all data -------------# 
> # default: diag_sc <- c(10, 1, 0.5) 
> 
> for (i in 1:nrow(dgp.df)) {
+   graph.type <- dgp.df[i, ]$graph.type
+   graph.param <- dgp.df[i, ]$graph.param
+   p <- dgp.df[i, ]$p
+   n <- dgp.df[i, ]$n
+   same.diag <- dgp.df[i, ]$same.diag
+   
+   print(paste(i, graph.type, graph.param, p, n, same.diag))
+   data.name <- paste0(graph.type, graph.param, 
+                       "_p", p, "_n", n, "_diag", same.diag, "_R", R)
+   Theta_list <- list()
+   X_list <- list()
+   
+   for (r in 1:R) {
+     if (graph.type=="block") {
+       Theta <- get_block_graph(p=p, prob=graph.param, rho = 0.4) 
+     } else if (graph.type=="band" && graph.param==1) {
+       Theta <- get_band1_graph(p=p)
+     } else if (graph.type=="band" && graph.param==2) {
+       Theta <- get_band2_graph(p=p)
+     } else if (graph.type=="scale-free") {
+       Theta <- get_scalefree_graph(p=p)
+     } else if (graph.type=="hub") {
+       Theta <- get_hub_graph(p=p)
+     } else if (graph.type=="random") {
+       Theta <- get_random_graph(p=p, prob=graph.param, rho = 0.4)
+     }
+     
+     if (min(eigen(Theta)$values)<=1e-3) {
+       stop("Theta is not positive definite")
+     }
+     Theta_list[[r]] <- Theta
+     
+     Sigma <- solve(Theta)
+     if (min(eigen(Sigma)$values)<=1e-3) {
+       print("Sigma is not positive definite")
+     }
+     X_list[[r]] <- mvrnorm(n=n, mu=rep(0,p), Sigma=Sigma)
+     
+   }
+   
+   save(X_list, Theta_list, file=paste0("out/", data.name, "_data.RData"))
+ }
[1] "1 band 1 100 300 0"
[1] "2 band 1 100 500 0"
[1] "3 band 1 300 300 0"
[1] "4 band 1 300 500 0"
[1] "5 band 2 100 300 0"
[1] "6 band 2 100 500 0"
[1] "7 band 2 300 300 0"
[1] "8 band 2 300 500 0"
[1] "9 block 0.01 100 300 0"
[1] "10 block 0.01 100 500 0"
[1] "11 block 0.01 300 300 0"
[1] "12 block 0.01 300 500 0"
[1] "13 hub 5 100 300 0"
[1] "14 hub 5 100 500 0"
[1] "15 hub 5 300 300 0"
[1] "16 hub 5 300 500 0"
[1] "17 random 0.01 100 300 0"
[1] "18 random 0.01 100 500 0"
[1] "19 random 0.01 300 300 0"
[1] "20 random 0.01 300 500 0"
> 
> print(dim(dgp.df))
[1] 20  5
> 
> save(dgp.df, file=paste0("out/DGP.RData"))
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
926.316   1.968 931.596 
